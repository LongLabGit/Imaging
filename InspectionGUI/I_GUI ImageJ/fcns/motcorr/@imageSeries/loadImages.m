function loadImages(obj,imagePath,varargin)

p = inputParser;
p.addRequired('imagePath',@(x)ischar(x)||iscellstr(x));
p.addParamValue('whichImages',[]);
p.addParamValue('verbose',true);
p.addParamValue('channels',1,@(x)(x==round(x)||x>0));
parse(p,imagePath,varargin{:});



% ensure imagePath is formatted as a cell array of strings
if ischar(imagePath); imagePath = {imagePath}; end

% handle case where ending is an asterisk
if length(imagePath)==1 && strcmp(imagePath{1}(end),'*')
   % find all files with the prefix specified
   
   % extract path to files and desired prefix
   [pathstr, name] = fileparts(imagePath{1});
   
   % get names of all files in the directory
   possibleMatches = dir(pathstr);
   
   % accmulate a list of files with matching string
   imageList = {};
   for pp=1:length(possibleMatches)
       if strfind(possibleMatches(pp).name,strrep(name,'*',''))
           imageList = [imageList [pathstr '/' possibleMatches(pp).name]];
       end
   end
   
   % if nonempty, save as the list of images
   if ~isempty(imageList)
       imagePath = imageList;
   else
       error('No images found matching search string %s',imagePath{1})
   end
    
end

% get total number of images
imCounts = getImageCount(imagePath);

    
% choose which images to load, save in a boolean vector
if isempty(p.Results.whichImages)
    whichImages = true(sum(imCounts),1);
else
    whichImages = false(sum(imCounts),1);
    whichImages(p.Results.whichImages) = true;
end

% identify which images are found in which files
fileMap = zeros(sum(imCounts),1);
for ff=1:length(imCounts)
    firstZero = find(fileMap==0,1,'first');
    fileMap(firstZero+(1:imCounts(ff))-1) = ff;
end

% identify the number of the first image in each file
firstImageIndex = cumsum([0 imCounts(1:end-1)])+1;

% zero out images not to be loaded
fileMap(~whichImages) = 0;

% cycle through image paths that have files to be loaded
for pathIndex = unique(fileMap(fileMap>0))'
    
    % expand path and display it
    %thisPath = expandPath(imagePath{pathIndex});
    thisPath = imagePath{pathIndex};
    if p.Results.verbose
        fprintf('Loading %s\n     ',thisPath)
    end
    
    % get image specs and load first image
    info = imfinfo(thisPath);
    firstImage = imread(thisPath,1,'Info',info);
    
    % first time around...
    if ~exist('ims','var')
        
        % save description if it exists
        if isfield(info,'ImageDescription')
            
            % if the ImageDescription field appears to have been generated by scanimage
            if strfind(info(1).ImageDescription,'state.configName')
                % save it as struct
                
                % parse lines
                D=textscan(info(1).ImageDescription,'%s','Delimiter','\n');
                % initialize struct
                desc=struct;
                % parse each line to load it into a struct
                % these lines are of the form "state.software.version=3.6"
                for dd=1:length(D{1})
                    %eval(['desc.' strrep(D{1}{dd},'''','"') ';']);
                    eval(['desc.' D{1}{dd} ';']);
                end
                % save struct
                obj.description = desc;
                
            else % if it was not generated by scanimage
                
                % just save the raw text from the description
                obj.description = info(1).ImageDescription;
                
            end
        end
        
        
        % initialize a matrix to store the images
        ims=zeros(size(firstImage,1),size(firstImage,2),size(firstImage,3),...
            length(sum(whichImages)),class(firstImage));
        
        
    else % for subsequent image files, verify the images are the correct size
        
        if ~(size(firstImage,1)==size(ims(:,:,:,1),1) && ...
                size(firstImage,2)==size(ims(:,:,:,1),2) && ...
                size(firstImage,3)==size(ims(:,:,:,1),3) )
            error('Expected size [%d %d %d], but found size [%d %d %d] in %s',...
                size(ims(:,:,:,1),1),size(ims(:,:,:,1),2),size(ims(:,:,:,1),3),...
                size(firstImage,1),size(firstImage,2),size(firstImage,3),thisPath)
        end
    end
    
    % get list of image numbers to load from this file
    imageList = find(fileMap == pathIndex) - firstImageIndex(pathIndex) + 1;
    % identify where to start putting them in the list of all images
    imsInsertionStart = sum(fileMap(fileMap>0) < pathIndex);
    
    % for each image to be loaded
    for ii = 1:length(imageList)
        
        % update progress indicator
        if p.Results.verbose && mod(ii,floor(length(imageList)/10))==0;
            fprintf('%d, ',ii); end
        
        % load image
        ims(:,:,:,imsInsertionStart + ii) = ...
            imread(thisPath,imageList(ii),'Info',info);
    end
    % update progress indicator
    if p.Results.verbose, fprintf(' total of %d images loaded, %d color channels\n',ii,p.Results.channels); end
end

% reshape for channels
if p.Results.channels > 1
    %ims = permute( reshape( permute(ims,[1 2 4 3]), [size(ims,1) size(ims,2) size(ims,4)/p.Results.channels p.Results.channels]), [1 2 4 3]);
    ims = reshape( ims, [size(ims,1) size(ims,2) p.Results.channels size(ims,4)/p.Results.channels]);
end

% save into object
obj.images = ims;



